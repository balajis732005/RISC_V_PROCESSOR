$date
	Mon Feb 24 23:06:13 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench $end
$var reg 1 ! clock $end
$var reg 1 " reset $end
$scope module uut $end
$var wire 2 # alu_control [1:0] $end
$var wire 32 $ alu_in_from_mux [31:0] $end
$var wire 4 % alu_op [3:0] $end
$var wire 32 & alu_out [31:0] $end
$var wire 1 ' branch_enable $end
$var wire 32 ( branch_target [31:0] $end
$var wire 1 ) clock $end
$var wire 1 * imm_enable $end
$var wire 32 + immediate [31:0] $end
$var wire 32 , instruction [31:0] $end
$var wire 32 - mem_data [31:0] $end
$var wire 1 . mem_or_alu $end
$var wire 1 / mem_read_enable $end
$var wire 1 0 mem_write_enable $end
$var wire 32 1 next_pro_con [31:0] $end
$var wire 32 2 pro_con [31:0] $end
$var wire 32 3 pro_con_plus [31:0] $end
$var wire 32 4 read_data_1 [31:0] $end
$var wire 32 5 read_data_2 [31:0] $end
$var wire 1 6 reg_write_enable $end
$var wire 1 7 reset $end
$var wire 32 8 write_data [31:0] $end
$var wire 1 9 zero $end
$scope module ProgramCounter $end
$var wire 1 ) clock $end
$var wire 32 : p_in [31:0] $end
$var wire 1 7 reset $end
$var reg 32 ; p_out [31:0] $end
$upscope $end
$scope module ProgramCounterPlus $end
$var wire 32 < from_pc [31:0] $end
$var wire 32 = next_pc [31:0] $end
$upscope $end
$scope module InstructionMemory $end
$var wire 32 > read_address [31:0] $end
$var reg 32 ? inst_out [31:0] $end
$upscope $end
$scope module ControlUnit $end
$var wire 7 @ opcode [6:0] $end
$var reg 2 A alu_control [1:0] $end
$var reg 1 B branch_enable $end
$var reg 1 C imm_enable $end
$var reg 1 D mem_or_alu $end
$var reg 1 E mem_read_enable $end
$var reg 1 F mem_write_enable $end
$var reg 1 G reg_write_enable $end
$upscope $end
$scope module RegisterFile $end
$var wire 1 ) clock $end
$var wire 5 H read_register_1 [4:0] $end
$var wire 5 I read_register_2 [4:0] $end
$var wire 1 6 register_write $end
$var wire 1 7 reset $end
$var wire 32 J write_data [31:0] $end
$var wire 5 K write_register [4:0] $end
$var integer 32 L i [31:0] $end
$var reg 32 M read_data_1 [31:0] $end
$var reg 32 N read_data_2 [31:0] $end
$upscope $end
$scope module ImmediateRegister $end
$var wire 32 O instruction [31:0] $end
$var reg 32 P imm_gen [31:0] $end
$upscope $end
$scope module AluControlUnit $end
$var wire 2 Q alu_control [1:0] $end
$var wire 3 R func3 [2:0] $end
$var wire 7 S func7 [6:0] $end
$var reg 4 T alu_con_out [3:0] $end
$upscope $end
$scope module MuxAluSel $end
$var wire 32 U in_1 [31:0] $end
$var wire 32 V in_2 [31:0] $end
$var wire 32 W mux_out [31:0] $end
$var wire 1 * sel $end
$upscope $end
$scope module AluUnit $end
$var wire 4 X alu_op [3:0] $end
$var wire 32 Y in_1 [31:0] $end
$var wire 32 Z in_2 [31:0] $end
$var reg 32 [ alu_out [31:0] $end
$var reg 1 \ zero $end
$upscope $end
$scope module DataMemory $end
$var wire 32 ] address [31:0] $end
$var wire 1 ) clock $end
$var wire 1 / mem_read_enable $end
$var wire 1 0 mem_write_enable $end
$var wire 1 7 reset $end
$var wire 32 ^ write_data [31:0] $end
$var integer 32 _ i [31:0] $end
$var reg 32 ` read_data [31:0] $end
$upscope $end
$scope module MuxMemToReg $end
$var wire 32 a in_1 [31:0] $end
$var wire 32 b in_2 [31:0] $end
$var wire 32 c mux_out [31:0] $end
$var wire 1 . sel $end
$upscope $end
$scope module Adder $end
$var wire 32 d adder_out [31:0] $end
$var wire 32 e in_1 [31:0] $end
$var wire 32 f in_2 [31:0] $end
$upscope $end
$scope module MuxPC $end
$var wire 32 g in_1 [31:0] $end
$var wire 32 h in_2 [31:0] $end
$var wire 32 i mux_out [31:0] $end
$var wire 1 j sel $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0j
b1 i
b0 h
b1 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b10000000000 _
b0 ^
b0 ]
1\
b0 [
b0 Z
b0 Y
b10 X
b0 W
b0 V
b0 U
b10 T
b0 S
b0 R
b10 Q
b0 P
b100000000010010110011 O
b0 N
b0 M
b100000 L
b1001 K
b0 J
b1 I
b0 H
1G
0F
0E
0D
0C
0B
b10 A
b110011 @
b100000000010010110011 ?
b0 >
b1 =
b0 <
b0 ;
b1 :
19
b0 8
17
16
b0 5
b0 4
b1 3
b0 2
b1 1
00
0/
0.
b0 -
b100000000010010110011 ,
b0 +
0*
0)
b0 (
0'
b0 &
b10 %
b0 $
b10 #
1"
0!
$end
#5000
b10000000000 _
b100000 L
1!
1)
#10000
0!
0)
0"
07
#15000
b10 1
b10 :
b10 i
b1011 K
b10 I
b1 H
b10 3
b10 =
b10 g
b1000001000010110110011 ?
b1000001000010110110011 ,
b1000001000010110110011 O
b1 ;
b1 (
b1 d
b1 h
b1 2
b1 <
b1 >
b1 e
1!
1)
#20000
0!
0)
#25000
b11 1
b11 :
b11 i
b1101 K
b11 I
b10 H
b11 3
b11 =
b11 g
b1100010000011010110011 ?
b1100010000011010110011 ,
b1100010000011010110011 O
b10 ;
b10 (
b10 d
b10 h
b10 2
b10 <
b10 >
b10 e
1!
1)
#30000
0!
0)
#35000
b100 1
b100 :
b100 i
b1111 K
b100 I
b11 H
b100 3
b100 =
b100 g
b10000011000011110110011 ?
b10000011000011110110011 ,
b10000011000011110110011 O
b11 ;
b11 (
b11 d
b11 h
b11 2
b11 <
b11 >
b11 e
1!
1)
#40000
0!
0)
#45000
bx 8
bx J
bx c
bx $
bx W
bx Z
x\
x9
bx [
bx &
bx ]
bx a
bx N
bx 5
bx U
bx ^
bx M
bx 4
bx Y
0G
06
b0 A
b0 #
b0 Q
b101 1
b101 :
b101 i
bx S
bx R
bx K
bx I
bx H
bx @
b101 3
b101 =
b101 g
bx ?
bx ,
bx O
b100 ;
b100 (
b100 d
b100 h
b100 2
b100 <
b100 >
b100 e
1!
1)
#50000
0!
0)
#55000
b110 1
b110 :
b110 i
b110 3
b110 =
b110 g
b101 ;
b101 (
b101 d
b101 h
b101 2
b101 <
b101 >
b101 e
1!
1)
#60000
0!
0)
#65000
b111 1
b111 :
b111 i
b111 3
b111 =
b111 g
b110 ;
b110 (
b110 d
b110 h
b110 2
b110 <
b110 >
b110 e
1!
1)
#70000
0!
0)
#75000
b1000 1
b1000 :
b1000 i
b1000 3
b1000 =
b1000 g
b111 ;
b111 (
b111 d
b111 h
b111 2
b111 <
b111 >
b111 e
1!
1)
#80000
0!
0)
#85000
b1001 1
b1001 :
b1001 i
b1001 3
b1001 =
b1001 g
b1000 ;
b1000 (
b1000 d
b1000 h
b1000 2
b1000 <
b1000 >
b1000 e
1!
1)
#90000
0!
0)
#95000
b1010 1
b1010 :
b1010 i
b1010 3
b1010 =
b1010 g
b1001 ;
b1001 (
b1001 d
b1001 h
b1001 2
b1001 <
b1001 >
b1001 e
1!
1)
#100000
0!
0)
#105000
b1011 1
b1011 :
b1011 i
b1011 3
b1011 =
b1011 g
b1010 ;
b1010 (
b1010 d
b1010 h
b1010 2
b1010 <
b1010 >
b1010 e
1!
1)
#110000
0!
0)
#115000
b1100 1
b1100 :
b1100 i
b1100 3
b1100 =
b1100 g
b1011 ;
b1011 (
b1011 d
b1011 h
b1011 2
b1011 <
b1011 >
b1011 e
1!
1)
#120000
0!
0)
#125000
b1101 1
b1101 :
b1101 i
b1101 3
b1101 =
b1101 g
b1100 ;
b1100 (
b1100 d
b1100 h
b1100 2
b1100 <
b1100 >
b1100 e
1!
1)
#130000
0!
0)
#135000
b1110 1
b1110 :
b1110 i
b1110 3
b1110 =
b1110 g
b1101 ;
b1101 (
b1101 d
b1101 h
b1101 2
b1101 <
b1101 >
b1101 e
1!
1)
#140000
0!
0)
#145000
b1111 1
b1111 :
b1111 i
b1111 3
b1111 =
b1111 g
b1110 ;
b1110 (
b1110 d
b1110 h
b1110 2
b1110 <
b1110 >
b1110 e
1!
1)
#150000
0!
0)
#155000
b10000 1
b10000 :
b10000 i
b10000 3
b10000 =
b10000 g
b1111 ;
b1111 (
b1111 d
b1111 h
b1111 2
b1111 <
b1111 >
b1111 e
1!
1)
#160000
0!
0)
#165000
b10001 1
b10001 :
b10001 i
b10001 3
b10001 =
b10001 g
b10000 ;
b10000 (
b10000 d
b10000 h
b10000 2
b10000 <
b10000 >
b10000 e
1!
1)
#170000
0!
0)
#175000
b10010 1
b10010 :
b10010 i
b10010 3
b10010 =
b10010 g
b10001 ;
b10001 (
b10001 d
b10001 h
b10001 2
b10001 <
b10001 >
b10001 e
1!
1)
#180000
0!
0)
#185000
b10011 1
b10011 :
b10011 i
b10011 3
b10011 =
b10011 g
b10010 ;
b10010 (
b10010 d
b10010 h
b10010 2
b10010 <
b10010 >
b10010 e
1!
1)
#190000
0!
0)
#195000
b10100 1
b10100 :
b10100 i
b10100 3
b10100 =
b10100 g
b10011 ;
b10011 (
b10011 d
b10011 h
b10011 2
b10011 <
b10011 >
b10011 e
1!
1)
#200000
0!
0)
#205000
b10101 1
b10101 :
b10101 i
b10101 3
b10101 =
b10101 g
b10100 ;
b10100 (
b10100 d
b10100 h
b10100 2
b10100 <
b10100 >
b10100 e
1!
1)
#210000
0!
0)
